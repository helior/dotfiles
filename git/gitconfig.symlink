[advice]
  statusHints = false

[alias]
  # Apply a patch without committing it
  a = apply --index
  # Add all the things (including removal of files)
  ad = add -A
  am = commit --amend
  br = branch -a
  co = checkout
  com = commit -v
  # List contributors with number of commits
  contributors = shortlog --summary --numbered
  # Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  df = diff --cached
  # Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  # Log display from screencast, with train tracks.
  log = log --decorate --graph --date=short
  # Alternate log display from Scott Chacon
  ll = log --pretty=oneline --abbrev-commit --graph --decorate
  # Set fetching pull-requests from upstream remotes easy-peasy https://gist.github.com/piscisaureus/3342247
  pr-upstream = !git config --add remote.upstream.fetch '+refs/pull/*/head:refs/remotes/upstream/pr/*' && git fetch upstream
  pr-origin = !git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*' && git fetch origin
  # Create an on-the-fly snapshot
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  st = !clear && git status

  # Add a remote; $1: remote name; $2: github path
  ra = "!f() { git remote add $1 https://github.com/$2.git; }; f"

  # Remove branches that have already been merged with master; a.k.a. ‘delete merged’
	prune = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Prune all stale remote branches
  prune-all = !git remote | xargs -n 1 git remote prune

  # See what's new
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'


[apply]
  whitespace = fix

[branch]
  autosetupmerge = true
  autosetupmerge = true
  autosetuprebase = always

[color]
  ui = true
  diff = auto
  status = auto
  branch = auto

[color "branch"]
  current = green bold
  local = green
  remote = cyan

[color "diff"]
  meta = cyan
  frag = magenta bold
  old = red
  new = green
  whitespace = red reverse

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[core]
  autocrlf = false
  safecrlf = false
  ignorecase = false
  excludesfile = ~/.gitignore

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  renames = copies
	tool = opendiff
  algorithm = patience

[difftool]
  prompt = true

[difftool "opendiff"]
  cmd = /usr/bin/opendiff \"$LOCAL\" \"$REMOTE\" -merge \"$MERGED\" | cat

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[help]
  # Did you mean "something something", Let me execute that for you..
  autocorrect = 1

[hub]
  # host = gh.riotgames.com
  # protocol = https

[merge]
  summary = true
  verbosity = 1
	tool = Kaleidoscope

[mergetool]
  prompt = false

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
	default = tracking
	followTags = true

[status]
  submodule = 1

[user]
	name = Helior Colorado
	email = me@helior.info

[rerere]
	enabled = true
[http]
	#proxy = http://proxyanbcge.nbc.com:80
[filter "lfs"]
	required = true
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
